{
  "debug_assert": {
    "prefix": "debug_assert",
    "body": [
      "debug_assert!(${1});"
    ],
    "description": "debug_assert!(…)"
  },
  "debug_assert_eq": {
    "prefix": "debug_assert_eq",
    "body": [
      "debug_assert_eq!(${1}, ${2});"
    ],
    "description": "debug_assert_eq!(…, …)"
  },
  "format_args": {
    "prefix": "format_args",
    "body": [
      "format_args!(\"${1}\")"
    ],
    "description": "format_args!(…)"
  },
  "module_path": {
    "prefix": "module_path",
    "body": [
      "module_path!()"
    ],
    "description": "module_path!()"
  },
  "println": {
    "prefix": "println",
    "body": [
      "println!(\"${1}\");"
    ],
    "description": "println!(…);"
  },
  "thread_local": {
    "prefix": "thread_local",
    "body": [
      "thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"
    ],
    "description": "thread_local!(static …: … = …);"
  },
  "writeln": {
    "prefix": "writeln",
    "body": [
      "writeln!(${1}, \"${2}\")"
    ],
    "description": "writeln!(…, …)"
  },
  "assert_eq": {
    "prefix": "assert_eq",
    "body": [
      "assert_eq!(${1}, ${2});"
    ],
    "description": "assert_eq!(…, …);"
  },
  "bench": {
    "prefix": "bench",
    "body": [
      "#[bench]",
      "fn ${1:name}(b: &mut test::Bencher) {",
      "    ${2:b.iter(|| ${3:/* benchmark code */})}",
      "}"
    ],
    "description": "#[bench]"
  },
  "macro_rules": {
    "prefix": "macro_rules",
    "body": [
      "macro_rules! ${1:name} {",
      "    (${2}) => (${3})",
      "}"
    ],
    "description": "macro_rules! … { … }"
  }
}
